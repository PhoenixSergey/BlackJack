{"remainingRequest":"C:\\Users\\Anuitex\\source\\repos\\BlackJack\\BlackJack.AngularMVC\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Users\\Anuitex\\source\\repos\\BlackJack\\BlackJack.AngularMVC\\node_modules\\@progress\\kendo-angular-buttons\\dist\\es\\buttongroup\\buttongroup.component.js","dependencies":[{"path":"C:\\Users\\Anuitex\\source\\repos\\BlackJack\\BlackJack.AngularMVC\\node_modules\\@progress\\kendo-angular-buttons\\dist\\es\\buttongroup\\buttongroup.component.js","mtime":499162500000},{"path":"C:\\Users\\Anuitex\\source\\repos\\BlackJack\\BlackJack.AngularMVC\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1532357517493},{"path":"C:\\Users\\Anuitex\\source\\repos\\BlackJack\\BlackJack.AngularMVC\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["/** PURE_IMPORTS_START _button_button.directive,_angular_core,_progress_kendo_angular_l10n,_button_button.service,_util,_navigation_keys PURE_IMPORTS_END */\nimport { ButtonDirective } from '../button/button.directive';\nimport { Component, Input, ContentChildren, HostBinding, HostListener, isDevMode, ElementRef } from '@angular/core';\nimport { LocalizationService, L10N_PREFIX } from '@progress/kendo-angular-l10n';\nimport { KendoButtonService } from '../button/button.service';\nimport { isPresent } from '../util';\nimport { Keys } from '../navigation/keys';\n/**\n * @hidden\n */\nvar ariaChecked = 'aria-checked';\n/**\n * @hidden\n */\nvar role = 'role';\n/**\n * @hidden\n */\nvar tabindex = 'tabindex';\n/**\n * Represents the Kendo UI ButtonGroup component for Angular.\n */\nvar ButtonGroupComponent = /** @class */ /*@__PURE__*/ (function () {\n    function ButtonGroupComponent(service, localization, element) {\n        var _this = this;\n        this.service = service;\n        this.element = element;\n        /**\n         * By default, the selection mode of the ButtonGroup is set to `multiple`.\n         */\n        this.selection = 'multiple';\n        /**\n         * Changes the visual appearance by using alternative styling options.\n         *\n         * The available values are:\n         * * `bare`\n         * * `flat`\n         * * `outline`\n         *\n         * The `look` property of the ButtonGroup takes precedence over the `look` property\n         * of the individual buttons that are part of the group.\n         */\n        this.look = 'default';\n        /**\n         * Specifies the [`tabIndex`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex) of the component.\n         */\n        this.tabIndex = 0;\n        this.localizationChangeSubscription = localization.changes.subscribe(function (_a) {\n            var rtl = _a.rtl;\n            return _this.direction = rtl ? 'rtl' : 'ltr';\n        });\n    }\n    Object.defineProperty(ButtonGroupComponent.prototype, \"wrapperClass\", {\n        get: function () {\n            return true;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ButtonGroupComponent.prototype, \"disabledClass\", {\n        get: function () {\n            return this.disabled;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ButtonGroupComponent.prototype, \"stretchedClass\", {\n        get: function () {\n            return !!this.width;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ButtonGroupComponent.prototype, \"isBare\", {\n        get: function () {\n            return this.look === 'bare';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ButtonGroupComponent.prototype, \"isFlat\", {\n        get: function () {\n            return this.look === 'flat';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ButtonGroupComponent.prototype, \"isOutline\", {\n        get: function () {\n            return this.look === 'outline';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ButtonGroupComponent.prototype, \"getRole\", {\n        get: function () {\n            return this.isSelectionSingle() ? 'radiogroup' : 'group';\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ButtonGroupComponent.prototype, \"dir\", {\n        get: function () {\n            return this.direction;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ButtonGroupComponent.prototype, \"ariaDisabled\", {\n        get: function () {\n            return this.disabled;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ButtonGroupComponent.prototype, \"wrapperWidth\", {\n        get: function () {\n            return this.width;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ButtonGroupComponent.prototype, \"wrapperTabIndex\", {\n        get: function () {\n            return this.tabIndex;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @hidden\n     */\n    ButtonGroupComponent.prototype.keydown = function (event) {\n        if (this.isSelectionSingle()) {\n            this.navigateSelection(event);\n        }\n        else {\n            this.navigateFocus(event);\n        }\n    };\n    /**\n     * @hidden\n     */\n    ButtonGroupComponent.prototype.focusout = function (event) {\n        if (event.relatedTarget && event.relatedTarget.parentNode !== this.element.nativeElement) {\n            this.defocus(this.buttons.toArray());\n        }\n    };\n    ButtonGroupComponent.prototype.ngOnInit = function () {\n        var _this = this;\n        this.subscription = this.service.buttonClicked$.subscribe(function (button) {\n            if (_this.isSelectionSingle()) {\n                _this.deactivate(_this.buttons.filter(function (current) { return current !== button; }));\n                button.setSelected(true);\n                button.setAttribute(ariaChecked, button.selected.toString());\n                button.setAttribute(tabindex, \"0\");\n            }\n            else {\n                _this.defocus(_this.buttons.toArray());\n                button.setSelected(!button.selected);\n                button.setAttribute(ariaChecked, (!button.selected).toString());\n                button.setAttribute(tabindex, \"0\");\n            }\n        });\n    };\n    ButtonGroupComponent.prototype.ngAfterContentInit = function () {\n        var _this = this;\n        var isRadioGroup = this.isSelectionSingle();\n        var buttonsRole = isRadioGroup ? 'radio' : 'checkbox';\n        var anyChecked = false;\n        this.buttons.forEach(function (button) {\n            button.setAttribute(ariaChecked, button.selected.toString());\n            button.setAttribute(role, buttonsRole);\n            if (isPresent(_this.disabled)) {\n                button.disabled = _this.disabled;\n            }\n            if (_this.look !== 'default') {\n                button.look = _this.look;\n            }\n            // if (!isRadioGroup || button.selected) {\n            //     button.setAttribute(tabindex, button.tabIndex.toString());\n            // } else if (isRadioGroup && !button.selected) {\n            //     button.setAttribute(tabindex, \"-1\");\n            // }\n            if (!button.selected) {\n                button.setAttribute(tabindex, \"-1\");\n            }\n            else {\n                button.setAttribute(tabindex, \"0\");\n            }\n            anyChecked = anyChecked || button.selected;\n        });\n        if (isRadioGroup && !anyChecked) {\n            this.buttons.first.setAttribute(tabindex, \"0\");\n            this.buttons.last.setAttribute(tabindex, \"0\");\n        }\n    };\n    ButtonGroupComponent.prototype.ngAfterViewChecked = function () {\n        if (this.buttons.length) {\n            this.buttons.first.renderer.addClass(this.buttons.first.element, 'k-group-start');\n            this.buttons.last.renderer.addClass(this.buttons.last.element, 'k-group-end');\n        }\n    };\n    ButtonGroupComponent.prototype.ngOnDestroy = function () {\n        this.subscription.unsubscribe();\n        this.localizationChangeSubscription.unsubscribe();\n    };\n    ButtonGroupComponent.prototype.ngAfterContentChecked = function () {\n        this.verifySettings();\n    };\n    ButtonGroupComponent.prototype.navigateSelection = function (event) {\n        var selectedIndex = this.buttons.toArray().findIndex(function (current) { return current.selected; });\n        var firstIndex = 0;\n        var lastIndex = this.buttons.length - 1;\n        if (selectedIndex !== undefined) {\n            if (event.keyCode === Keys.right && selectedIndex < lastIndex) {\n                this.deactivate(this.buttons.filter(function (current) { return current.selected; }));\n                this.activate(this.buttons.filter(function (_current, index) {\n                    return index === selectedIndex + 1;\n                }));\n            }\n            if (event.keyCode === Keys.left && selectedIndex > firstIndex) {\n                this.deactivate(this.buttons.filter(function (current) { return current.selected; }));\n                this.activate(this.buttons.filter(function (_current, index) {\n                    return index === selectedIndex - 1;\n                }));\n            }\n        }\n    };\n    ButtonGroupComponent.prototype.navigateFocus = function (event) {\n        var focusedIndex = this.buttons.toArray().findIndex(function (current) { return current.element.tabIndex !== -1; });\n        var firstIndex = 0;\n        var lastIndex = this.buttons.length - 1;\n        if (event.keyCode === Keys.right && focusedIndex < lastIndex) {\n            this.defocus(this.buttons.toArray());\n            this.focus(this.buttons.filter(function (_current, index) {\n                return index === focusedIndex + 1;\n            }));\n        }\n        if (event.keyCode === Keys.left && focusedIndex > firstIndex) {\n            this.defocus(this.buttons.toArray());\n            this.focus(this.buttons.filter(function (_current, index) {\n                return index === focusedIndex - 1;\n            }));\n        }\n    };\n    ButtonGroupComponent.prototype.deactivate = function (buttons) {\n        buttons.forEach(function (button) {\n            button.setSelected(false);\n            button.setAttribute(ariaChecked, button.selected.toString());\n            button.setAttribute(tabindex, \"-1\");\n        });\n    };\n    ButtonGroupComponent.prototype.activate = function (buttons) {\n        buttons.forEach(function (button) {\n            button.setSelected(true);\n            button.setAttribute(ariaChecked, button.selected.toString());\n            button.setAttribute(tabindex, \"0\");\n            button.focus();\n        });\n    };\n    ButtonGroupComponent.prototype.defocus = function (buttons) {\n        buttons.forEach(function (button) {\n            button.setAttribute(tabindex, \"-1\");\n        });\n    };\n    ButtonGroupComponent.prototype.focus = function (buttons) {\n        buttons.forEach(function (button) {\n            button.setAttribute(tabindex, \"0\");\n            button.focus();\n        });\n    };\n    ButtonGroupComponent.prototype.verifySettings = function () {\n        if (isDevMode()) {\n            if (this.isSelectionSingle() && this.buttons.filter(function (button) { return button.selected; }).length > 1) {\n                throw new Error('Having multiple selected buttons with single selection mode is not supported');\n            }\n        }\n    };\n    ButtonGroupComponent.prototype.isSelectionSingle = function () {\n        return this.selection === 'single';\n    };\n    return ButtonGroupComponent;\n}());\nexport { ButtonGroupComponent };\n",null]}