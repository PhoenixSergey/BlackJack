{"remainingRequest":"C:\\Users\\Anuitex\\source\\repos\\BlackJack\\BlackJack.AngularMVC\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!C:\\Users\\Anuitex\\source\\repos\\BlackJack\\BlackJack.AngularMVC\\node_modules\\@progress\\kendo-angular-dropdowns\\dist\\es\\list.component.js","dependencies":[{"path":"C:\\Users\\Anuitex\\source\\repos\\BlackJack\\BlackJack.AngularMVC\\node_modules\\@progress\\kendo-angular-dropdowns\\dist\\es\\list.component.js","mtime":499162500000},{"path":"C:\\Users\\Anuitex\\source\\repos\\BlackJack\\BlackJack.AngularMVC\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1532357517493},{"path":"C:\\Users\\Anuitex\\source\\repos\\BlackJack\\BlackJack.AngularMVC\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["/** PURE_IMPORTS_START _angular_core,_list_item.directive,_util,_selection.service,rxjs_operators_map,rxjs_operators_merge PURE_IMPORTS_END */\nimport { Component, Input, Output, EventEmitter, ViewChildren, ViewChild } from '@angular/core';\nimport { ListItemDirective } from './list-item.directive';\nimport { isPresent, getter } from './util';\nimport { SelectionService } from './selection.service';\nimport { map } from 'rxjs/operators/map';\nimport { merge } from 'rxjs/operators/merge';\n/**\n * @hidden\n */\nvar ListComponent = /** @class */ /*@__PURE__*/ (function () {\n    function ListComponent(selectionService) {\n        this.data = [];\n        this.selected = [];\n        this.focused = -1;\n        this.multipleSelection = false;\n        this.onClick = new EventEmitter();\n        this.selectionService = selectionService;\n        this.scrollSubscription = this.selectionService\n            .onSelect.pipe(map(function (args) { return args.indices[0]; }), merge(this.selectionService.onFocus))\n            .subscribe(this.scrollToItem.bind(this));\n    }\n    ListComponent.prototype.ngAfterViewInit = function () {\n        if (this.show === true) {\n            this.scrollToItem(this.selectionService.focused);\n        }\n    };\n    ListComponent.prototype.ngOnDestroy = function () {\n        this.scrollSubscription.unsubscribe();\n    };\n    ListComponent.prototype.setContainerClasses = function () {\n        return {\n            'k-list-scroller': true\n        };\n    };\n    ListComponent.prototype.getHeight = function () {\n        return this.height + \"px\";\n    };\n    ListComponent.prototype.getText = function (dataItem) {\n        return getter(dataItem, this.textField);\n    };\n    ListComponent.prototype.getValue = function (dataItem) {\n        return getter(dataItem, this.valueField);\n    };\n    ListComponent.prototype.scrollToItem = function (index) {\n        var items = this.items.toArray();\n        if (isPresent(items[index]) && index !== -1) {\n            this.scroll(items[index].element);\n        }\n    };\n    ListComponent.prototype.scroll = function (item) {\n        if (!item) {\n            return;\n        }\n        var nativeElement = item.nativeElement;\n        var content = this.content.nativeElement, itemOffsetTop = nativeElement.offsetTop, itemOffsetHeight = nativeElement.offsetHeight, contentScrollTop = content.scrollTop, contentOffsetHeight = content.clientHeight, bottomDistance = itemOffsetTop + itemOffsetHeight;\n        if (contentScrollTop > itemOffsetTop) {\n            contentScrollTop = itemOffsetTop;\n        }\n        else if (bottomDistance > (contentScrollTop + contentOffsetHeight)) {\n            contentScrollTop = (bottomDistance - contentOffsetHeight);\n        }\n        content.scrollTop = contentScrollTop;\n    };\n    return ListComponent;\n}());\nexport { ListComponent };\n",null]}